"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.2
// source: llm/llm_rules_output.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.LLMRulesOuput = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const typeRegistry_1 = require("../typeRegistry");
function createBaseLLMRulesOuput() {
    return { $type: "model.boid.LLMRulesOuput", rules: [] };
}
exports.LLMRulesOuput = {
    $type: "model.boid.LLMRulesOuput",
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.rules) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLLMRulesOuput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.rules.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.LLMRulesOuput.$type,
            rules: globalThis.Array.isArray(object?.rules) ? object.rules.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rules?.length) {
            obj.rules = message.rules;
        }
        return obj;
    },
    create(base) {
        return exports.LLMRulesOuput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLLMRulesOuput();
        message.rules = object.rules?.map((e) => e) || [];
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.LLMRulesOuput.$type, exports.LLMRulesOuput);
