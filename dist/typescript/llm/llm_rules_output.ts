// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.2
// source: llm/llm_rules_output.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../typeRegistry";

export interface LLMRulesOuput {
  $type: "model.boid.LLMRulesOuput";
  /** All the rules generated by LLM */
  rules: string[];
}

function createBaseLLMRulesOuput(): LLMRulesOuput {
  return { $type: "model.boid.LLMRulesOuput", rules: [] };
}

export const LLMRulesOuput = {
  $type: "model.boid.LLMRulesOuput" as const,

  encode(message: LLMRulesOuput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rules) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LLMRulesOuput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLLMRulesOuput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rules.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LLMRulesOuput {
    return {
      $type: LLMRulesOuput.$type,
      rules: globalThis.Array.isArray(object?.rules) ? object.rules.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: LLMRulesOuput): unknown {
    const obj: any = {};
    if (message.rules?.length) {
      obj.rules = message.rules;
    }
    return obj;
  },

  create(base?: DeepPartial<LLMRulesOuput>): LLMRulesOuput {
    return LLMRulesOuput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LLMRulesOuput>): LLMRulesOuput {
    const message = createBaseLLMRulesOuput();
    message.rules = object.rules?.map((e) => e) || [];
    return message;
  },
};

messageTypeRegistry.set(LLMRulesOuput.$type, LLMRulesOuput);

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;
