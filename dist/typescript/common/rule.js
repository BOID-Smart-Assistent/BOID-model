"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.2
// source: common/rule.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const typeRegistry_1 = require("../typeRegistry");
exports.protobufPackage = "uu.boid";
function createBaseRule() {
    return { $type: "uu.boid.Rule", head: 0, complement: 0 };
}
exports.Rule = {
    $type: "uu.boid.Rule",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.head !== 0) {
            writer.uint32(8).int32(message.head);
        }
        if (message.complement !== 0) {
            writer.uint32(16).int32(message.complement);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.head = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.complement = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.Rule.$type,
            head: isSet(object.head) ? globalThis.Number(object.head) : 0,
            complement: isSet(object.complement) ? globalThis.Number(object.complement) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.head !== 0) {
            obj.head = Math.round(message.head);
        }
        if (message.complement !== 0) {
            obj.complement = Math.round(message.complement);
        }
        return obj;
    },
    create(base) {
        return exports.Rule.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRule();
        message.head = object.head ?? 0;
        message.complement = object.complement ?? 0;
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.Rule.$type, exports.Rule);
function isSet(value) {
    return value !== null && value !== undefined;
}
