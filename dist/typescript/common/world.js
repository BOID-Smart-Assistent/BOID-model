"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.2
// source: common/world.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Person_PhoneNumber = exports.Person = exports.Person_PhoneType = exports.protobufPackage = void 0;
exports.person_PhoneTypeFromJSON = person_PhoneTypeFromJSON;
exports.person_PhoneTypeToJSON = person_PhoneTypeToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const typeRegistry_1 = require("../typeRegistry");
exports.protobufPackage = "uu.boid";
var Person_PhoneType;
(function (Person_PhoneType) {
    Person_PhoneType[Person_PhoneType["PHONE_TYPE_UNSPECIFIED"] = 0] = "PHONE_TYPE_UNSPECIFIED";
    Person_PhoneType[Person_PhoneType["PHONE_TYPE_MOBILE"] = 1] = "PHONE_TYPE_MOBILE";
    Person_PhoneType[Person_PhoneType["PHONE_TYPE_HOME"] = 2] = "PHONE_TYPE_HOME";
    Person_PhoneType[Person_PhoneType["PHONE_TYPE_WORK"] = 3] = "PHONE_TYPE_WORK";
    Person_PhoneType[Person_PhoneType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Person_PhoneType || (exports.Person_PhoneType = Person_PhoneType = {}));
function person_PhoneTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "PHONE_TYPE_UNSPECIFIED":
            return Person_PhoneType.PHONE_TYPE_UNSPECIFIED;
        case 1:
        case "PHONE_TYPE_MOBILE":
            return Person_PhoneType.PHONE_TYPE_MOBILE;
        case 2:
        case "PHONE_TYPE_HOME":
            return Person_PhoneType.PHONE_TYPE_HOME;
        case 3:
        case "PHONE_TYPE_WORK":
            return Person_PhoneType.PHONE_TYPE_WORK;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Person_PhoneType.UNRECOGNIZED;
    }
}
function person_PhoneTypeToJSON(object) {
    switch (object) {
        case Person_PhoneType.PHONE_TYPE_UNSPECIFIED:
            return "PHONE_TYPE_UNSPECIFIED";
        case Person_PhoneType.PHONE_TYPE_MOBILE:
            return "PHONE_TYPE_MOBILE";
        case Person_PhoneType.PHONE_TYPE_HOME:
            return "PHONE_TYPE_HOME";
        case Person_PhoneType.PHONE_TYPE_WORK:
            return "PHONE_TYPE_WORK";
        case Person_PhoneType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBasePerson() {
    return { $type: "uu.boid.Person", name: "", id: 0, email: "", phones: [] };
}
exports.Person = {
    $type: "uu.boid.Person",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.id !== 0) {
            writer.uint32(16).int32(message.id);
        }
        if (message.email !== "") {
            writer.uint32(26).string(message.email);
        }
        for (const v of message.phones) {
            exports.Person_PhoneNumber.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerson();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.phones.push(exports.Person_PhoneNumber.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.Person.$type,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            phones: globalThis.Array.isArray(object?.phones)
                ? object.phones.map((e) => exports.Person_PhoneNumber.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.phones?.length) {
            obj.phones = message.phones.map((e) => exports.Person_PhoneNumber.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Person.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePerson();
        message.name = object.name ?? "";
        message.id = object.id ?? 0;
        message.email = object.email ?? "";
        message.phones = object.phones?.map((e) => exports.Person_PhoneNumber.fromPartial(e)) || [];
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.Person.$type, exports.Person);
function createBasePerson_PhoneNumber() {
    return { $type: "uu.boid.Person.PhoneNumber", number: "", type: 0 };
}
exports.Person_PhoneNumber = {
    $type: "uu.boid.Person.PhoneNumber",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.number !== "") {
            writer.uint32(10).string(message.number);
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerson_PhoneNumber();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.number = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.Person_PhoneNumber.$type,
            number: isSet(object.number) ? globalThis.String(object.number) : "",
            type: isSet(object.type) ? person_PhoneTypeFromJSON(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.number !== "") {
            obj.number = message.number;
        }
        if (message.type !== 0) {
            obj.type = person_PhoneTypeToJSON(message.type);
        }
        return obj;
    },
    create(base) {
        return exports.Person_PhoneNumber.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePerson_PhoneNumber();
        message.number = object.number ?? "";
        message.type = object.type ?? 0;
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.Person_PhoneNumber.$type, exports.Person_PhoneNumber);
function isSet(value) {
    return value !== null && value !== undefined;
}
