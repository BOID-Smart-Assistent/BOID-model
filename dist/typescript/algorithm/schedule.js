"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.2
// source: algorithm/schedule.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Presentation = exports.Timeslot = exports.Schedule = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const typeRegistry_1 = require("../typeRegistry");
function createBaseSchedule() {
    return { $type: "model.boid.Schedule", timeslots: [] };
}
exports.Schedule = {
    $type: "model.boid.Schedule",
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.timeslots) {
            exports.Timeslot.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSchedule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.timeslots.push(exports.Timeslot.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.Schedule.$type,
            timeslots: globalThis.Array.isArray(object?.timeslots)
                ? object.timeslots.map((e) => exports.Timeslot.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.timeslots?.length) {
            obj.timeslots = message.timeslots.map((e) => exports.Timeslot.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Schedule.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSchedule();
        message.timeslots = object.timeslots?.map((e) => exports.Timeslot.fromPartial(e)) || [];
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.Schedule.$type, exports.Schedule);
function createBaseTimeslot() {
    return { $type: "model.boid.Timeslot", id: "", presentation: undefined };
}
exports.Timeslot = {
    $type: "model.boid.Timeslot",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.presentation !== undefined) {
            exports.Presentation.encode(message.presentation, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimeslot();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.presentation = exports.Presentation.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.Timeslot.$type,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            presentation: isSet(object.presentation) ? exports.Presentation.fromJSON(object.presentation) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.presentation !== undefined) {
            obj.presentation = exports.Presentation.toJSON(message.presentation);
        }
        return obj;
    },
    create(base) {
        return exports.Timeslot.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTimeslot();
        message.id = object.id ?? "";
        message.presentation = (object.presentation !== undefined && object.presentation !== null)
            ? exports.Presentation.fromPartial(object.presentation)
            : undefined;
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.Timeslot.$type, exports.Timeslot);
function createBasePresentation() {
    return { $type: "model.boid.Presentation", id: "", label: "" };
}
exports.Presentation = {
    $type: "model.boid.Presentation",
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.label !== "") {
            writer.uint32(18).string(message.label);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePresentation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.label = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            $type: exports.Presentation.$type,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            label: isSet(object.label) ? globalThis.String(object.label) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.label !== "") {
            obj.label = message.label;
        }
        return obj;
    },
    create(base) {
        return exports.Presentation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePresentation();
        message.id = object.id ?? "";
        message.label = object.label ?? "";
        return message;
    },
};
typeRegistry_1.messageTypeRegistry.set(exports.Presentation.$type, exports.Presentation);
function isSet(value) {
    return value !== null && value !== undefined;
}
