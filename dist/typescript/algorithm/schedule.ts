// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.2
// source: algorithm/schedule.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../typeRegistry";

export interface Schedule {
  $type: "model.boid.Schedule";
  /** All the timeslots in the schedule */
  timeslots: Timeslot[];
}

export interface Timeslot {
  $type: "model.boid.Timeslot";
  id: string;
  /** The presentation given at the current timeslot */
  presentation: Presentation | undefined;
}

/** TODO: Rename this to something more generic */
export interface Presentation {
  $type: "model.boid.Presentation";
  id: string;
  /** The name of the presentation */
  label: string;
}

function createBaseSchedule(): Schedule {
  return { $type: "model.boid.Schedule", timeslots: [] };
}

export const Schedule = {
  $type: "model.boid.Schedule" as const,

  encode(message: Schedule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.timeslots) {
      Timeslot.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Schedule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchedule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.timeslots.push(Timeslot.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Schedule {
    return {
      $type: Schedule.$type,
      timeslots: globalThis.Array.isArray(object?.timeslots)
        ? object.timeslots.map((e: any) => Timeslot.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Schedule): unknown {
    const obj: any = {};
    if (message.timeslots?.length) {
      obj.timeslots = message.timeslots.map((e) => Timeslot.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Schedule>): Schedule {
    return Schedule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Schedule>): Schedule {
    const message = createBaseSchedule();
    message.timeslots = object.timeslots?.map((e) => Timeslot.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(Schedule.$type, Schedule);

function createBaseTimeslot(): Timeslot {
  return { $type: "model.boid.Timeslot", id: "", presentation: undefined };
}

export const Timeslot = {
  $type: "model.boid.Timeslot" as const,

  encode(message: Timeslot, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.presentation !== undefined) {
      Presentation.encode(message.presentation, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Timeslot {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimeslot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.presentation = Presentation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Timeslot {
    return {
      $type: Timeslot.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      presentation: isSet(object.presentation) ? Presentation.fromJSON(object.presentation) : undefined,
    };
  },

  toJSON(message: Timeslot): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.presentation !== undefined) {
      obj.presentation = Presentation.toJSON(message.presentation);
    }
    return obj;
  },

  create(base?: DeepPartial<Timeslot>): Timeslot {
    return Timeslot.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Timeslot>): Timeslot {
    const message = createBaseTimeslot();
    message.id = object.id ?? "";
    message.presentation = (object.presentation !== undefined && object.presentation !== null)
      ? Presentation.fromPartial(object.presentation)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Timeslot.$type, Timeslot);

function createBasePresentation(): Presentation {
  return { $type: "model.boid.Presentation", id: "", label: "" };
}

export const Presentation = {
  $type: "model.boid.Presentation" as const,

  encode(message: Presentation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Presentation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePresentation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Presentation {
    return {
      $type: Presentation.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      label: isSet(object.label) ? globalThis.String(object.label) : "",
    };
  },

  toJSON(message: Presentation): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    return obj;
  },

  create(base?: DeepPartial<Presentation>): Presentation {
    return Presentation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Presentation>): Presentation {
    const message = createBasePresentation();
    message.id = object.id ?? "";
    message.label = object.label ?? "";
    return message;
  },
};

messageTypeRegistry.set(Presentation.$type, Presentation);

export interface DataLoaderOptions {
  cache?: boolean;
}

export interface DataLoaders {
  rpcDataLoaderOptions?: DataLoaderOptions;
  getDataLoader<T>(identifier: string, constructorFn: () => T): T;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
